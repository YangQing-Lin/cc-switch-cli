# GoReleaser configuration for cc-switch-cli
version: 2

before:
  hooks:
    # 构建前格式化代码（遵循 CLAUDE.md 规范）
    - go fmt ./...
    # 运行测试确保代码质量
    - go test ./...
    # 生成 Windows 资源文件（.syso）以减少 Defender 误报
    - bash build/windows/generate_syso.sh

builds:
  - id: ccs
    binary: ccs
    main: ./main.go

    # 构建时注入版本信息
    # 移除 -s -w 以避免 Windows Defender 误报
    ldflags:
      - -X github.com/YangQing-Lin/cc-switch-cli/internal/version.Version={{.Version}}
      - -X github.com/YangQing-Lin/cc-switch-cli/internal/version.BuildDate={{.Date}}
      - -X github.com/YangQing-Lin/cc-switch-cli/internal/version.GitCommit={{.ShortCommit}}

    env:
      - CGO_ENABLED=0

    # Windows 资源文件（减少误报）
    flags:
      - -trimpath

    # 目标平台
    goos:
      - linux
      - darwin
      - windows

    goarch:
      - amd64
      - arm64

    # Windows 使用 .exe 扩展名
    hooks:
      post:
        - cmd: echo "Built {{ .Name }} for {{ .Os }}/{{ .Arch }}"

  # Windows 专用：禁用自更新的测试构建（使用 build tag: no_self_update）
  - id: ccs_no_update
    binary: ccs
    main: ./main.go
    ldflags:
      - -X github.com/YangQing-Lin/cc-switch-cli/internal/version.Version={{.Version}}
      - -X github.com/YangQing-Lin/cc-switch-cli/internal/version.BuildDate={{.Date}}
      - -X github.com/YangQing-Lin/cc-switch-cli/internal/version.GitCommit={{.ShortCommit}}
    env:
      - CGO_ENABLED=0
    flags:
      - -trimpath
      - -tags
      - no_self_update
    goos:
      - windows
    goarch:
      - amd64
    hooks:
      post:
        - cmd: echo "Built NO-UPDATE {{ .Name }} for {{ .Os }}/{{ .Arch }}"

archives:
  - id: default
    builds:
      - ccs
    format_overrides:
      # Windows 使用 zip，其他平台使用 tar.gz
      - goos: windows
        format: zip

    # 归档文件命名: ccs-1.0.0-linux-amd64.tar.gz
    name_template: "{{ .ProjectName }}-{{ .Version }}-{{ .Os }}-{{ .Arch }}"

    files:
      # 只包含二进制文件，不打包额外文件
      - none*

  # 针对禁用自更新的 Windows 构建，使用独立命名，便于识别
  - id: no_update
    builds:
      - ccs_no_update
    format_overrides:
      - goos: windows
        format: zip
    name_template: "{{ .ProjectName }}-{{ .Version }}-no-update-{{ .Os }}-{{ .Arch }}"
    files:
      - none*

checksum:
  name_template: "checksums.txt"
  algorithm: sha256

changelog:
  # 自动模式 + 简单模板
  use: github
  sort: asc

  filters:
    exclude:
      - "^docs:"
      - "^test:"
      - "^chore:"
      - "^Merge"

  groups:
    - title: Features
      regexp: '^.*?feat(\([[:word:]]+\))??!?:.+$'
      order: 0
    - title: Bug Fixes
      regexp: '^.*?fix(\([[:word:]]+\))??!?:.+$'
      order: 1
    - title: Others
      order: 999

release:
  # GitHub Release 设置
  github:
    owner: YangQing-Lin
    name: cc-switch-cli

  # Release 标题模板
  name_template: "v{{.Version}}"

  # 自动生成 Release Notes
  draft: false
  prerelease: auto

  # Release header 和 footer
  header: |
    ## cc-switch-cli v{{.Version}}

    跨平台 ClaudeCode/Codex 配置管理工具

  footer: |
    ---

    **安装方法**:
    1. 下载对应平台的压缩包
    2. 解压并将 `ccs` (或 `ccs.exe`) 移动到 PATH 目录
    3. 运行 `ccs version` 验证安装

    **macOS 用户注意**:
    下载后需要移除隔离标记才能运行：
    ```bash
    xattr -d com.apple.quarantine ccs
    chmod +x ccs
    ```
    或右键点击 `ccs` → 选择"打开" → 点击"打开"确认

    **Full Changelog**: https://github.com/YangQing-Lin/cc-switch-cli/compare/{{ .PreviousTag }}...{{ .Tag }}

# ====================================================================================
# Windows Defender 误报防护措施
# ====================================================================================
#
# 已实施的防护措施（生效中）：
#
# 1. ✅ 嵌入 Windows 资源文件 (.syso)
#    - 包含应用图标 (icon.ico)
#    - 版本信息 (FileVersion, ProductVersion)
#    - 公司/产品元数据 (CompanyName, ProductName, Copyright)
#    - 文件描述 (FileDescription)
#    → 效果：让 exe 右键属性显示完整信息，类似商业软件
#
# 2. ✅ 移除 -s -w 编译标志
#    - 保留符号表和调试信息
#    - 避免被 Defender ML 模型识别为"恶意混淆"
#    → 效果：二进制文件更"透明"，不触发混淆检测
#
# 3. ✅ 使用 -trimpath 编译标志
#    - 规范化构建路径
#    - 不暴露开发者本地路径
#    → 效果：构建可重现，但不会显得"隐藏信息"
#
# 4. ⚠️  CGO_ENABLED=0（静态编译）
#    - 优点：单文件部署，无依赖
#    - 缺点：静态链接可能略微增加误报概率
#    - 决策：保留，因为便携性更重要
#
# ====================================================================================
# 进阶防护方案（可选，需额外配置）
# ====================================================================================
#
# 方案 A：MSI 安装包（推荐，需 Windows runner）
#   - 使用 WiX Toolset 打包成 .msi
#   - 包含注册表项、开始菜单快捷方式、卸载信息
#   - MSI 格式本身就是"受信任"的标志
#   - 参考：cc-switch UI 项目的 src-tauri/wix/per-user-main.wxs
#   - 实现：需在 .github/workflows/release.yml 中添加 Windows-2022 runner 步骤
#
# 方案 B：代码签名（最佳，需购买证书）
#   - 使用 EV 代码签名证书签名 exe/msi
#   - 费用：约 $100-300/年（标准证书）或 $300-500/年（EV 证书）
#   - EV 证书可立即建立 SmartScreen 信誉
#   - 实现：在 GoReleaser 的 hooks.post 中调用 signtool.exe
#
# 方案 C：自签名证书（免费，效果有限）
#   - 使用 OpenSSL 生成自签名证书
#   - 不被 Windows 信任，但能降低部分误报
#   - 用户仍需"始终信任该发行商"
#   - 仅适合内部分发场景
#
# ====================================================================================

# 不发布到其他平台
announce:
  skip: true
